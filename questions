(define (caar x) (car (car x)))

(define (cadr x) (car (cdr x)))

(define (cdar x) (cdr (car x)))

(define (cddr x) (cdr (cdr x)))

; Some utility functions that you may find useful to implement
(define (zip pairs) 
    (define (firstList tempList)
        (cond ((null? tempList)'())
            (else (append (list(caar tempList)) (firstList (cdr tempList))))))
    (define (removeFirst tempList)
        (cond ((null? tempList) '())
            (else (append (list (cdar tempList)) (removeFirst (cdr tempList))))))
    (list (firstList pairs) (firstList (removeFirst pairs)))
)

(define (carZip value)
    (car (zip value)))

; ; Problem 15
; ; Returns a list of two-element lists
(define (enumerate s)
  ; BEGIN PROBLEM 15
  (helper 0 s))

(define (helper index s)
  (if (null? s)
      '()
      (append (cons (cons index (cons (car s) nil)) nil)
              (helper (+ index 1) (cdr s)))))

; END PROBLEM 15
; ; Problem 16
; ; Merge two lists LIST1 and LIST2 according to COMP and return
; ; the merged lists.
(define (merge comp list1 list2)
    (cond ((null? list1)
            list2)
        ((null? list2)
            list1)
        ((comp (car list1) (car list2))
            (append (list (car list1) (car list2) ) (merge comp (cdr list1) (cdr list2) ) ))
        (else
            (append (list (car list2) (car list1) ) (merge comp (cdr list1) (cdr list2) ) ))))

; END PROBLEM 16
(merge < '(1 5 7 9) '(4 8 10))

; expect (1 4 5 7 8 9 10)
(merge > '(9 7 5 1) '(10 8 4 3))

; expect (10 9 8 7 5 4 3 1)
; ; Problem 17
(define (nondecreaselist s)
  ; BEGIN PROBLEM 17
  (cond ((null? s) '())
        ((null? (cdr s)) (list s))
        ((> (car s) (cadr s))
         (cons (list (car s))
               (nondecreaselist (cdr s))))
        (else
         (let ((next (nondecreaselist (cdr s))))
           (cons (cons (car s)
                       (car next))
                 (cdr next))))))

; END PROBLEM 17
; ; Problem EC
; ; Returns a function that checks if an expression is the special form FORM
(define (check-special form)
  (lambda (expr) (equal? form (car expr))))

(define lambda? (check-special 'lambda))

(define define? (check-special 'define))

(define quoted? (check-special 'quote))

(define let? (check-special 'let))

; ; Converts all let special forms in EXPR into equivalent forms using lambda
(define (let-to-lambda expr)
  (cond 
    ((atom? expr)
     ; BEGIN PROBLEM EC
     expr
     ; END PROBLEM EC
    )
    ((quoted? expr)
     ; BEGIN PROBLEM EC
     (cons 'quote (cons (cadr expr) nil)))
     ; END PROBLEM EC
     
    ((or (lambda? expr) (define? expr))
     (let ((form (car expr))
           (params (cadr expr))
           (body (cddr expr)))
       ; BEGIN PROBLEM EC
       (if (lambda? expr)
           (cons 'lambda (cons params (map let-to-lambda body)))
           (cons 'lambda (cons (cdr params) (map let-to-lambda body)))
       )
       ; END PROBLEM EC
     ))
    ((let? expr)
     (let ((values (cadr expr))
           (body (cddr expr))
           (zipped (zip (cadr expr))))
       ; BEGIN PROBLEM EC
            (cons 
                  (append (cons 'lambda (cons ( map let-to-lambda (car zipped)) nil)) (map let-to-lambda body)) 
                    (map let-to-lambda (cadr zipped)))
       ; END PROBLEM EC
     ))
    (else
     ; BEGIN PROBLEM EC
        (map let-to-lambda expr)
     ; END PROBLEM EC
    )))
